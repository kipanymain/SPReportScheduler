//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EngineAdmin
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RevenueConnectEntities : DbContext
    {
        public RevenueConnectEntities()
            : base("name=RevenueConnectEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Activity> Activities { get; set; }
        public virtual DbSet<ActivityAttribute> ActivityAttributes { get; set; }
        public virtual DbSet<AgedCampaign> AgedCampaigns { get; set; }
        public virtual DbSet<AgedDailyLead> AgedDailyLeads { get; set; }
        public virtual DbSet<ApplicationGroup> ApplicationGroups { get; set; }
        public virtual DbSet<ApplicationGroupRole> ApplicationGroupRoles { get; set; }
        public virtual DbSet<ApplicationUserGroup> ApplicationUserGroups { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }
        public virtual DbSet<CampaignOutput> CampaignOutputs { get; set; }
        public virtual DbSet<CLIENT> CLIENTS { get; set; }
        public virtual DbSet<ContactAttribute> ContactAttributes { get; set; }
        public virtual DbSet<ContactNavigation> ContactNavigations { get; set; }
        public virtual DbSet<ContactRecord> ContactRecords { get; set; }
        public virtual DbSet<ContactRecord2> ContactRecord2 { get; set; }
        public virtual DbSet<ContactRecordDetail> ContactRecordDetails { get; set; }
        public virtual DbSet<ContactRecordDetail2> ContactRecordDetail2 { get; set; }
        public virtual DbSet<ContactTask> ContactTasks { get; set; }
        public virtual DbSet<ContactVariable> ContactVariables { get; set; }
        public virtual DbSet<CUSTOMER> CUSTOMERs { get; set; }
        public virtual DbSet<FBImpressionData> FBImpressionDatas { get; set; }
        public virtual DbSet<IDRServiceQueue> IDRServiceQueues { get; set; }
        public virtual DbSet<LeadLookup> LeadLookups { get; set; }
        public virtual DbSet<LeadLookupDetail> LeadLookupDetails { get; set; }
        public virtual DbSet<LeadRecord> LeadRecords { get; set; }
        public virtual DbSet<LeadRecordAttribute> LeadRecordAttributes { get; set; }
        public virtual DbSet<LEAD> LEADS { get; set; }
        public virtual DbSet<LEADS_Archive> LEADS_Archive { get; set; }
        public virtual DbSet<LeadView> LeadViews { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<QualifiedLeadSegment> QualifiedLeadSegments { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<ScriptAction> ScriptActions { get; set; }
        public virtual DbSet<ScriptCalculation> ScriptCalculations { get; set; }
        public virtual DbSet<ScriptClause> ScriptClauses { get; set; }
        public virtual DbSet<ScriptClient> ScriptClients { get; set; }
        public virtual DbSet<ScriptClientEnvironment> ScriptClientEnvironments { get; set; }
        public virtual DbSet<ScriptClientUser> ScriptClientUsers { get; set; }
        public virtual DbSet<ScriptDash> ScriptDashes { get; set; }
        public virtual DbSet<ScriptDataView> ScriptDataViews { get; set; }
        public virtual DbSet<ScriptHTML> ScriptHTMLs { get; set; }
        public virtual DbSet<ScriptImage> ScriptImages { get; set; }
        public virtual DbSet<ScriptItem> ScriptItems { get; set; }
        public virtual DbSet<ScriptItemKey> ScriptItemKeys { get; set; }
        public virtual DbSet<ScriptItemSelector> ScriptItemSelectors { get; set; }
        public virtual DbSet<ScriptLayout> ScriptLayouts { get; set; }
        public virtual DbSet<ScriptLayoutDetail> ScriptLayoutDetails { get; set; }
        public virtual DbSet<ScriptLink> ScriptLinks { get; set; }
        public virtual DbSet<ScriptLookup> ScriptLookups { get; set; }
        public virtual DbSet<ScriptLookupDetail> ScriptLookupDetails { get; set; }
        public virtual DbSet<ScriptMenu> ScriptMenus { get; set; }
        public virtual DbSet<ScriptObject> ScriptObjects { get; set; }
        public virtual DbSet<ScriptObjectDetail> ScriptObjectDetails { get; set; }
        public virtual DbSet<ScriptProject> ScriptProjects { get; set; }
        public virtual DbSet<ScriptProjectVariable> ScriptProjectVariables { get; set; }
        public virtual DbSet<ScriptProjectWorkflow> ScriptProjectWorkflows { get; set; }
        public virtual DbSet<ScriptQuestion> ScriptQuestions { get; set; }
        public virtual DbSet<ScriptQuestionare> ScriptQuestionares { get; set; }
        public virtual DbSet<ScriptQuestionareDetail> ScriptQuestionareDetails { get; set; }
        public virtual DbSet<ScriptSection> ScriptSections { get; set; }
        public virtual DbSet<ScriptSectionLayout> ScriptSectionLayouts { get; set; }
        public virtual DbSet<ScriptTextHTML> ScriptTextHTMLs { get; set; }
        public virtual DbSet<ScriptValidator> ScriptValidators { get; set; }
        public virtual DbSet<ScriptVariable> ScriptVariables { get; set; }
        public virtual DbSet<ScriptVariableDetail> ScriptVariableDetails { get; set; }
        public virtual DbSet<ScriptWorkflow> ScriptWorkflows { get; set; }
        public virtual DbSet<WorkflowLayout> WorkflowLayouts { get; set; }
        public virtual DbSet<ZipCode> ZipCodes { get; set; }
        public virtual DbSet<AggregatedCounter> AggregatedCounters { get; set; }
        public virtual DbSet<Counter> Counters { get; set; }
        public virtual DbSet<Hash> Hashes { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<JobParameter> JobParameters { get; set; }
        public virtual DbSet<JobQueue> JobQueues { get; set; }
        public virtual DbSet<List> Lists { get; set; }
        public virtual DbSet<Schema> Schemata { get; set; }
        public virtual DbSet<Server> Servers { get; set; }
        public virtual DbSet<Set> Sets { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<APITestLead> APITestLeads { get; set; }
        public virtual DbSet<CampaignLimit> CampaignLimits { get; set; }
        public virtual DbSet<CampaignOutputSegment> CampaignOutputSegments { get; set; }
        public virtual DbSet<CampaignOutputSendLog> CampaignOutputSendLogs { get; set; }
        public virtual DbSet<CAMPAIGN> CAMPAIGNS { get; set; }
        public virtual DbSet<CampaignSegment> CampaignSegments { get; set; }
        public virtual DbSet<CotactRecord_temp> CotactRecord_temp { get; set; }
        public virtual DbSet<FBaccount> FBaccounts { get; set; }
        public virtual DbSet<FBad> FBads { get; set; }
        public virtual DbSet<FBadset> FBadsets { get; set; }
        public virtual DbSet<FBcampaign> FBcampaigns { get; set; }
        public virtual DbSet<FBImpression> FBImpressions { get; set; }
        public virtual DbSet<LEADS_ATTRIBUTE> LEADS_ATTRIBUTE { get; set; }
        public virtual DbSet<leads_data> leads_data { get; set; }
        public virtual DbSet<LEADS_SENT_LOG> LEADS_SENT_LOG { get; set; }
        public virtual DbSet<LeadSegment> LeadSegments { get; set; }
        public virtual DbSet<OutputSegment> OutputSegments { get; set; }
        public virtual DbSet<PixelTracking> PixelTrackings { get; set; }
        public virtual DbSet<REVENUE> REVENUES { get; set; }
        public virtual DbSet<ScriptWorkflowBackup> ScriptWorkflowBackups { get; set; }
        public virtual DbSet<Segment> Segments { get; set; }
        public virtual DbSet<TRANSACTION> TRANSACTIONS { get; set; }
        public virtual DbSet<URL> URLS { get; set; }
        public virtual DbSet<ZipList> ZipLists { get; set; }
        public virtual DbSet<ActiveOutputSegment> ActiveOutputSegments { get; set; }
        public virtual DbSet<ActiveSegment> ActiveSegments { get; set; }
        public virtual DbSet<AgedOutputSegment> AgedOutputSegments { get; set; }
        public virtual DbSet<CampaignDetail> CampaignDetails { get; set; }
        public virtual DbSet<DailyAdResult> DailyAdResults { get; set; }
        public virtual DbSet<DailyCostbyAd> DailyCostbyAds { get; set; }
        public virtual DbSet<LeadExport> LeadExports { get; set; }
        public virtual DbSet<QualifiedLeadDetail> QualifiedLeadDetails { get; set; }
        public virtual DbSet<QualifiedLead> QualifiedLeads { get; set; }
    
        public virtual int aspnet_AnyDataInTables(Nullable<int> tablesToCheck)
        {
            var tablesToCheckParameter = tablesToCheck.HasValue ?
                new ObjectParameter("TablesToCheck", tablesToCheck) :
                new ObjectParameter("TablesToCheck", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_AnyDataInTables", tablesToCheckParameter);
        }
    
        public virtual int aspnet_Applications_CreateApplication(string applicationName, ObjectParameter applicationId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Applications_CreateApplication", applicationNameParameter, applicationId);
        }
    
        public virtual int aspnet_CheckSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_CheckSchemaVersion", featureParameter, compatibleSchemaVersionParameter);
        }
    
        public virtual int aspnet_Paths_CreatePath(Nullable<System.Guid> applicationId, string path, ObjectParameter pathId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(System.Guid));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Paths_CreatePath", applicationIdParameter, pathParameter, pathId);
        }
    
        public virtual int aspnet_Personalization_GetApplicationId(string applicationName, ObjectParameter applicationId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Personalization_GetApplicationId", applicationNameParameter, applicationId);
        }
    
        public virtual int aspnet_PersonalizationAdministration_DeleteAllState(Nullable<bool> allUsersScope, string applicationName, ObjectParameter count)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_DeleteAllState", allUsersScopeParameter, applicationNameParameter, count);
        }
    
        public virtual int aspnet_PersonalizationAdministration_FindState(Nullable<bool> allUsersScope, string applicationName, Nullable<int> pageIndex, Nullable<int> pageSize, string path, string userName, Nullable<System.DateTime> inactiveSinceDate)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_FindState", allUsersScopeParameter, applicationNameParameter, pageIndexParameter, pageSizeParameter, pathParameter, userNameParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_GetCountOfState(ObjectParameter count, Nullable<bool> allUsersScope, string applicationName, string path, string userName, Nullable<System.DateTime> inactiveSinceDate)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_GetCountOfState", count, allUsersScopeParameter, applicationNameParameter, pathParameter, userNameParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_ResetSharedState(ObjectParameter count, string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_ResetSharedState", count, applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_ResetUserState(ObjectParameter count, string applicationName, Nullable<System.DateTime> inactiveSinceDate, string userName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_ResetUserState", count, applicationNameParameter, inactiveSinceDateParameter, userNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAllUsers_GetPageSettings(string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_GetPageSettings", applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAllUsers_ResetPageSettings(string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_ResetPageSettings", applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAllUsers_SetPageSettings(string applicationName, string path, byte[] pageSettings, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var pageSettingsParameter = pageSettings != null ?
                new ObjectParameter("PageSettings", pageSettings) :
                new ObjectParameter("PageSettings", typeof(byte[]));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_SetPageSettings", applicationNameParameter, pathParameter, pageSettingsParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_PersonalizationPerUser_GetPageSettings(string applicationName, string userName, string path, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_GetPageSettings", applicationNameParameter, userNameParameter, pathParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_PersonalizationPerUser_ResetPageSettings(string applicationName, string userName, string path, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_ResetPageSettings", applicationNameParameter, userNameParameter, pathParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_Profile_DeleteInactiveProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_DeleteInactiveProfiles", applicationNameParameter, profileAuthOptionsParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_Profile_GetNumberOfInactiveProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_GetNumberOfInactiveProfiles", applicationNameParameter, profileAuthOptionsParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_Profile_GetProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<int> pageIndex, Nullable<int> pageSize, string userNameToMatch, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_GetProfiles", applicationNameParameter, profileAuthOptionsParameter, pageIndexParameter, pageSizeParameter, userNameToMatchParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_Profile_GetProperties(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_GetProperties", applicationNameParameter, userNameParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_RegisterSchemaVersion(string feature, string compatibleSchemaVersion, Nullable<bool> isCurrentVersion, Nullable<bool> removeIncompatibleSchema)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            var isCurrentVersionParameter = isCurrentVersion.HasValue ?
                new ObjectParameter("IsCurrentVersion", isCurrentVersion) :
                new ObjectParameter("IsCurrentVersion", typeof(bool));
    
            var removeIncompatibleSchemaParameter = removeIncompatibleSchema.HasValue ?
                new ObjectParameter("RemoveIncompatibleSchema", removeIncompatibleSchema) :
                new ObjectParameter("RemoveIncompatibleSchema", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_RegisterSchemaVersion", featureParameter, compatibleSchemaVersionParameter, isCurrentVersionParameter, removeIncompatibleSchemaParameter);
        }
    
        public virtual int aspnet_Roles_CreateRole(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_CreateRole", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_Roles_DeleteRole(string applicationName, string roleName, Nullable<bool> deleteOnlyIfRoleIsEmpty)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var deleteOnlyIfRoleIsEmptyParameter = deleteOnlyIfRoleIsEmpty.HasValue ?
                new ObjectParameter("DeleteOnlyIfRoleIsEmpty", deleteOnlyIfRoleIsEmpty) :
                new ObjectParameter("DeleteOnlyIfRoleIsEmpty", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_DeleteRole", applicationNameParameter, roleNameParameter, deleteOnlyIfRoleIsEmptyParameter);
        }
    
        public virtual int aspnet_Roles_GetAllRoles(string applicationName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_GetAllRoles", applicationNameParameter);
        }
    
        public virtual int aspnet_Roles_RoleExists(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_RoleExists", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_Setup_RemoveAllRoleMembers(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RemoveAllRoleMembers", nameParameter);
        }
    
        public virtual int aspnet_Setup_RestorePermissions(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RestorePermissions", nameParameter);
        }
    
        public virtual int aspnet_UnRegisterSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UnRegisterSchemaVersion", featureParameter, compatibleSchemaVersionParameter);
        }
    
        public virtual int aspnet_Users_CreateUser(Nullable<System.Guid> applicationId, string userName, Nullable<bool> isUserAnonymous, Nullable<System.DateTime> lastActivityDate, ObjectParameter userId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isUserAnonymousParameter = isUserAnonymous.HasValue ?
                new ObjectParameter("IsUserAnonymous", isUserAnonymous) :
                new ObjectParameter("IsUserAnonymous", typeof(bool));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_CreateUser", applicationIdParameter, userNameParameter, isUserAnonymousParameter, lastActivityDateParameter, userId);
        }
    
        public virtual int aspnet_Users_DeleteUser(string applicationName, string userName, Nullable<int> tablesToDeleteFrom, ObjectParameter numTablesDeletedFrom)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var tablesToDeleteFromParameter = tablesToDeleteFrom.HasValue ?
                new ObjectParameter("TablesToDeleteFrom", tablesToDeleteFrom) :
                new ObjectParameter("TablesToDeleteFrom", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_DeleteUser", applicationNameParameter, userNameParameter, tablesToDeleteFromParameter, numTablesDeletedFrom);
        }
    
        public virtual int aspnet_UsersInRoles_AddUsersToRoles(string applicationName, string userNames, string roleNames, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            var roleNamesParameter = roleNames != null ?
                new ObjectParameter("RoleNames", roleNames) :
                new ObjectParameter("RoleNames", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UsersInRoles_AddUsersToRoles", applicationNameParameter, userNamesParameter, roleNamesParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_UsersInRoles_FindUsersInRole(string applicationName, string roleName, string userNameToMatch)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UsersInRoles_FindUsersInRole", applicationNameParameter, roleNameParameter, userNameToMatchParameter);
        }
    
        public virtual int aspnet_UsersInRoles_GetRolesForUser(string applicationName, string userName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UsersInRoles_GetRolesForUser", applicationNameParameter, userNameParameter);
        }
    
        public virtual int aspnet_UsersInRoles_GetUsersInRoles(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UsersInRoles_GetUsersInRoles", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_UsersInRoles_IsUserInRole(string applicationName, string userName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UsersInRoles_IsUserInRole", applicationNameParameter, userNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_UsersInRoles_RemoveUsersFromRoles(string applicationName, string userNames, string roleNames)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            var roleNamesParameter = roleNames != null ?
                new ObjectParameter("RoleNames", roleNames) :
                new ObjectParameter("RoleNames", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UsersInRoles_RemoveUsersFromRoles", applicationNameParameter, userNamesParameter, roleNamesParameter);
        }
    
        public virtual int aspnet_WebEvent_LogEvent(string eventId, Nullable<System.DateTime> eventTimeUtc, Nullable<System.DateTime> eventTime, string eventType, Nullable<decimal> eventSequence, Nullable<decimal> eventOccurrence, Nullable<int> eventCode, Nullable<int> eventDetailCode, string message, string applicationPath, string applicationVirtualPath, string machineName, string requestUrl, string exceptionType, string details)
        {
            var eventIdParameter = eventId != null ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(string));
    
            var eventTimeUtcParameter = eventTimeUtc.HasValue ?
                new ObjectParameter("EventTimeUtc", eventTimeUtc) :
                new ObjectParameter("EventTimeUtc", typeof(System.DateTime));
    
            var eventTimeParameter = eventTime.HasValue ?
                new ObjectParameter("EventTime", eventTime) :
                new ObjectParameter("EventTime", typeof(System.DateTime));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var eventSequenceParameter = eventSequence.HasValue ?
                new ObjectParameter("EventSequence", eventSequence) :
                new ObjectParameter("EventSequence", typeof(decimal));
    
            var eventOccurrenceParameter = eventOccurrence.HasValue ?
                new ObjectParameter("EventOccurrence", eventOccurrence) :
                new ObjectParameter("EventOccurrence", typeof(decimal));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventDetailCodeParameter = eventDetailCode.HasValue ?
                new ObjectParameter("EventDetailCode", eventDetailCode) :
                new ObjectParameter("EventDetailCode", typeof(int));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var applicationPathParameter = applicationPath != null ?
                new ObjectParameter("ApplicationPath", applicationPath) :
                new ObjectParameter("ApplicationPath", typeof(string));
    
            var applicationVirtualPathParameter = applicationVirtualPath != null ?
                new ObjectParameter("ApplicationVirtualPath", applicationVirtualPath) :
                new ObjectParameter("ApplicationVirtualPath", typeof(string));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var requestUrlParameter = requestUrl != null ?
                new ObjectParameter("RequestUrl", requestUrl) :
                new ObjectParameter("RequestUrl", typeof(string));
    
            var exceptionTypeParameter = exceptionType != null ?
                new ObjectParameter("ExceptionType", exceptionType) :
                new ObjectParameter("ExceptionType", typeof(string));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_WebEvent_LogEvent", eventIdParameter, eventTimeUtcParameter, eventTimeParameter, eventTypeParameter, eventSequenceParameter, eventOccurrenceParameter, eventCodeParameter, eventDetailCodeParameter, messageParameter, applicationPathParameter, applicationVirtualPathParameter, machineNameParameter, requestUrlParameter, exceptionTypeParameter, detailsParameter);
        }
    
        public virtual int KBSearch(string searchList, string clientID)
        {
            var searchListParameter = searchList != null ?
                new ObjectParameter("SearchList", searchList) :
                new ObjectParameter("SearchList", typeof(string));
    
            var clientIDParameter = clientID != null ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("KBSearch", searchListParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> New()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("New");
        }
    
        public virtual ObjectResult<string> sp_WhoIsActive(string filter, string filter_type, string not_filter, string not_filter_type, Nullable<bool> show_own_spid, Nullable<bool> show_system_spids, Nullable<byte> show_sleeping_spids, Nullable<bool> get_full_inner_text, Nullable<byte> get_plans, Nullable<bool> get_outer_command, Nullable<bool> get_transaction_info, Nullable<byte> get_task_info, Nullable<bool> get_locks, Nullable<bool> get_avg_time, Nullable<bool> get_additional_info, Nullable<bool> find_block_leaders, Nullable<byte> delta_interval, string output_column_list, string sort_order, Nullable<byte> format_output, string destination_table, Nullable<bool> return_schema, ObjectParameter schema, Nullable<bool> help)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(string));
    
            var filter_typeParameter = filter_type != null ?
                new ObjectParameter("filter_type", filter_type) :
                new ObjectParameter("filter_type", typeof(string));
    
            var not_filterParameter = not_filter != null ?
                new ObjectParameter("not_filter", not_filter) :
                new ObjectParameter("not_filter", typeof(string));
    
            var not_filter_typeParameter = not_filter_type != null ?
                new ObjectParameter("not_filter_type", not_filter_type) :
                new ObjectParameter("not_filter_type", typeof(string));
    
            var show_own_spidParameter = show_own_spid.HasValue ?
                new ObjectParameter("show_own_spid", show_own_spid) :
                new ObjectParameter("show_own_spid", typeof(bool));
    
            var show_system_spidsParameter = show_system_spids.HasValue ?
                new ObjectParameter("show_system_spids", show_system_spids) :
                new ObjectParameter("show_system_spids", typeof(bool));
    
            var show_sleeping_spidsParameter = show_sleeping_spids.HasValue ?
                new ObjectParameter("show_sleeping_spids", show_sleeping_spids) :
                new ObjectParameter("show_sleeping_spids", typeof(byte));
    
            var get_full_inner_textParameter = get_full_inner_text.HasValue ?
                new ObjectParameter("get_full_inner_text", get_full_inner_text) :
                new ObjectParameter("get_full_inner_text", typeof(bool));
    
            var get_plansParameter = get_plans.HasValue ?
                new ObjectParameter("get_plans", get_plans) :
                new ObjectParameter("get_plans", typeof(byte));
    
            var get_outer_commandParameter = get_outer_command.HasValue ?
                new ObjectParameter("get_outer_command", get_outer_command) :
                new ObjectParameter("get_outer_command", typeof(bool));
    
            var get_transaction_infoParameter = get_transaction_info.HasValue ?
                new ObjectParameter("get_transaction_info", get_transaction_info) :
                new ObjectParameter("get_transaction_info", typeof(bool));
    
            var get_task_infoParameter = get_task_info.HasValue ?
                new ObjectParameter("get_task_info", get_task_info) :
                new ObjectParameter("get_task_info", typeof(byte));
    
            var get_locksParameter = get_locks.HasValue ?
                new ObjectParameter("get_locks", get_locks) :
                new ObjectParameter("get_locks", typeof(bool));
    
            var get_avg_timeParameter = get_avg_time.HasValue ?
                new ObjectParameter("get_avg_time", get_avg_time) :
                new ObjectParameter("get_avg_time", typeof(bool));
    
            var get_additional_infoParameter = get_additional_info.HasValue ?
                new ObjectParameter("get_additional_info", get_additional_info) :
                new ObjectParameter("get_additional_info", typeof(bool));
    
            var find_block_leadersParameter = find_block_leaders.HasValue ?
                new ObjectParameter("find_block_leaders", find_block_leaders) :
                new ObjectParameter("find_block_leaders", typeof(bool));
    
            var delta_intervalParameter = delta_interval.HasValue ?
                new ObjectParameter("delta_interval", delta_interval) :
                new ObjectParameter("delta_interval", typeof(byte));
    
            var output_column_listParameter = output_column_list != null ?
                new ObjectParameter("output_column_list", output_column_list) :
                new ObjectParameter("output_column_list", typeof(string));
    
            var sort_orderParameter = sort_order != null ?
                new ObjectParameter("sort_order", sort_order) :
                new ObjectParameter("sort_order", typeof(string));
    
            var format_outputParameter = format_output.HasValue ?
                new ObjectParameter("format_output", format_output) :
                new ObjectParameter("format_output", typeof(byte));
    
            var destination_tableParameter = destination_table != null ?
                new ObjectParameter("destination_table", destination_table) :
                new ObjectParameter("destination_table", typeof(string));
    
            var return_schemaParameter = return_schema.HasValue ?
                new ObjectParameter("return_schema", return_schema) :
                new ObjectParameter("return_schema", typeof(bool));
    
            var helpParameter = help.HasValue ?
                new ObjectParameter("help", help) :
                new ObjectParameter("help", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_WhoIsActive", filterParameter, filter_typeParameter, not_filterParameter, not_filter_typeParameter, show_own_spidParameter, show_system_spidsParameter, show_sleeping_spidsParameter, get_full_inner_textParameter, get_plansParameter, get_outer_commandParameter, get_transaction_infoParameter, get_task_infoParameter, get_locksParameter, get_avg_timeParameter, get_additional_infoParameter, find_block_leadersParameter, delta_intervalParameter, output_column_listParameter, sort_orderParameter, format_outputParameter, destination_tableParameter, return_schemaParameter, schema, helpParameter);
        }
    
        public virtual int UniqueLeads()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UniqueLeads");
        }
    }
}
